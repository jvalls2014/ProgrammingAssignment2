## The first function creates the structure 
## functions do

## The makeCacheMatrix function  creates a special matrix structure which returns a list containing set - get functions
## allowing setting and getting the matrix and its inverse

makeCacheMatrix <- function(x = matrix()) {
    inverse <- NULL
    set <- function(y) {
        mat <<- y
        inverse <<- NULL
    }
    get <- function() mat
    setInverse <- function(inver) inverse <<- inver
    getInverse <- function() inverse
    list(set = set, get = get,
         setInverse = setInverse,
         getInverse = getInverse)
}


## The cacheSolve function calculates the inverse of the matrix, checking whether it has been already calculated. 
## If so, it gets the inverse from the cache and skips the computation

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
	m <- x$getinverse()
        if(!is.null(m)) {
             message("getting cached data")
             return(m)
        } 
        data <- x$get()
        m <- solve(data, ...)
        x$setInverse(m)
        m
}
